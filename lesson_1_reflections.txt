Q. How did viewing a diff between two versions of a file help you see the bug that was introduced?
A. Let's see.

Q. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

A. Manual Commit:
	Pros:
		1. Commits are more sensible as it is done by developer so he can understand the context as he provides message with git.
		2. He can do one commit per logical change which makes seeing history easy.

	Cons:
		1. Developer can sometimes do too short and frequent commits.
		2. He can also sometimes do too big commits which will become ambiguos while seeing history.

   Automatic commit by Google Docs:
   	Pros:
   		1. Developer does not have to think about commiting everytime he makes any changes.
   	Cons:
   		1. As commit is not done by developer he may get confused when seeing history as there will be no proper commit message
   		2. One commit per logic will not be done which will make history ambiguos.

Q. How can you use the commands git log and git diff to view the history of files?
A. Command:
		git log                        # it gives list of all recent commits with commit ID, date, author and commit message
		git log --stat                 # it gives same log result with statistics like file names where change happened
		git diff commitID1 commitID2   # it gives difference between two commits with all file names where change happened

Q. How is the staging area different from the working directory and the repository? 
A. Working directory: the Project directory(outermost directory) containing all files
   Repository:        the collection of commited files
   Staging area:      intermediate directory which contains files which will be commited to repository (Files in working directory 						which are not added to staging area will not be commited).

Q. What is .gitignore file?
A. .gitignore is a text file which contains the names of files which should be ignored while commiting. (Some files in a project 		directory are not important for repository so you can ignore them while commiting).
	* .gitignore resides in root working directory.
	Note: Only non-tracked(unstaged) files can be ignored from commiting. If you want to ignore staged file then first unstage that file and add that file's name in .gitignore file.

Q. What is stash?
A. If you want to save local uncommited changes (if you don't want to commit yet) before pulling, merging or checking out another branch then you can stash the changes(store the changes somewhere else temporarily) and later you can get back those chnges from stash and continue working.

Q. What is tag?
A.  Tags are references that point to specific points in Git history(commits). Tagging is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1). A tag is like a branch that doesn’t change. Unlike branches, tags, after being created, have no further history of commits. 

	There are 2 types of tags:

	1. Lightweight: Lightweight tags are essentially 'bookmarks' to a commit, they are just a name and a pointer to a commit, useful 				 for creating quick links to relevant commits. These are used as private tags.

	2. Anotated: 	Anotated tags are also like lightweight tags but with extra metadata like: Tagger name, email and date.
					It has tagging message just like commit message. Additionally, for security, annotated tags can be signed and verified with GNU Privacy Guard (GPG). These are used as public tags as anyone can know about this tag by help of metadata that it contains with it.

Q. How to make change in old commits?
A. You can checkout any old commit and after checking out you can do some changes. These changes will not affect that commit so if 		you want to save your new want to save those chnages then commit and create a new branch from that state and checkout new branch.

Q. What is detached head?
A. Git HEAD always points to latest commit of checked-out branch. So if you go into any older commit then it will show you that you 	are not in the latest commit of the current branch.

Q. How to undo changes?
A. There are 4 ways to undo changes:
	1. Checkout (should not be used to delete master branch)
	2. Revert (can be used for public commit as reverted commit will still be in history)
	3. Reset  (should be used for local commits which is not yet pushed)
	4. Amend Commit (Modify last commit)
	5. Clean (to delete untracked files)
	--Checkout--
	Suppose you have commit history like: A, B, C, D and you have to remove C commit(D included) then checkout B commit and do little changes and commit and save this new commit in a new branch by "git checkout -b new_branch". Now you have new branch and you can delete old branch which has C and D.

	--Revert--
	Suppose you have commit history like: A, B, C, D and you have to remove D commit(HEAD).
	If we execute "git revert HEAD", Git will create a new commit with the inverse of the last commit(HEAD).
	So new history will be: A, B, C, D, Revert "D"(similar to C).

	--RESET--
	Suppose you have commit history like: A, B, C, D and you have to remove C commit.
	If we invoke "git reset --hard C" the commit history is reset to that specified commit.
	Now new history will be: A, B, C.
	It will permanently delete commit. So use with CAUTION.

	--Amend Commit--
	"git commit --amend"
	This option will modify the last commit. Instead of creating a new commit, staged changes will be added to the previous commit. This command will open up the system's configured text editor and prompt to change the previously specified commit message.

	--Clean--
	It will delete untracked files only.


Q. What is rebasing?
A. Rebasing is similar to merging but the differences are:
							Merging 													Rebasing

		* It happens into the specified branch 								* It happens onto specified branch
			Ex: git merge branch1 												Ex: git rebase master
			will merge branch1 into checked out branch 							will rebase checked out branch onto master branch

		* It will not change commit history 								* It will change commit history
		


	Use Case:

	Do this to make sure your commits apply cleanly on a remote branch — perhaps in a project to which you’re trying to contribute but that you don’t maintain. In this case, you’d do your work in a branch and then rebase your work onto origin/master when you were ready to submit your patches to the main project. That way, the maintainer doesn’t have to do any integration work — just a fast-forward or a clean apply.

	Process:

	If you have 2 branches: master and branch1
	and you want to rebase branch1 changes ONTO master then:
															git checkout branch1  
															git rebase master
															git checkout master
															git merge branch1