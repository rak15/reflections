															Git Lesson

One Commit per Logical Change Solution
1. You commit all the changes required to add a new feature, which you’ve been working on for a week. You haven’t committed since you started working on it.

--- This commit seems too big. It's easier to understand what each commit does if each only does one thing and is fairly small. Going a week without committing is not the best idea.

2. You found three typos in your README. You fix and commit the first.

--- This commit seems too small. It would be better to fix all three typos, then commit. That way, your history won't get too cluttered with typo fixes. Plus, you don’t need to worry about introducing bugs to a README, so bundling changes together is more likely to be a good idea.

3. You commit all the changes required to add a new feature, which you’ve been working on for an hour.

--- This is probably a good size for a commit. All the work is on a single feature, so the commit will have a clear logical purpose. After an hour, the diff will probably have a fair amount of content in it, but not too much to understand.

On the other hand, sometimes after working for an hour you’ll have run into more than one natural committing point, in which case you would want to break the feature up into smaller commits. Because of this, “too big” could also be a reasonable answer here.

4. You fix two small bugs in different functions and commit them both at once.

--- This commit is probably too big. It would have been better to commit after the first bug fix, since the two bug fixes aren't related to each other.

Judgment Call
Choosing when to commit is a judgment call, and it's not always cut-and-dried. When choosing whether to commit, just keep in mind that each commit should have one clear, logical purpose, and you should never do too much work without committing.

-------------------------------------------------------------------------------------------------------------------------------------
--Merge conflict (Newline characters between Windows and Unix systems)--

Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.

Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.

To fix this, users should set either of global autocrlf attribute : 
					git config --global core.autocrlf input			# Configure Git on OS X or Linux to properly handle line endings
					git config --global core.autocrlf true			# Configure Git on Windows to properly handle line endings


