Git sees every file in your working copy as one of three things:

tracked - a file which has been previously staged or committed;
untracked - new file which has not been previously staged or committed; or
ignored - an untracked file which Git has been explicitly told to ignore.



git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on. Stashing is handy if you need to quickly switch context and work on something else, but you're mid-way through a code change and aren't quite ready to commit.

The "git stash" command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.

Note that the stash is local to your Git repository; stashes are not transferred to the server when you push.

You can reapply previously stashed changes with: "git stash pop"  	#apply most recent stash

Popping your stash removes the changes from your stash and reapplies them to your working copy.

Alternatively, you can reapply the changes to your working copy and keep them in your stash with: "git stash apply"
This is useful if you want to apply the same stashed changes to multiple branches.


					**By default, running git stash will stash:

					--changes that have been added to your index (staged changes)
					--changes made to files that are currently tracked by Git (unstaged changes)
					But it will not stash:

					--new files in your working copy that have not yet been staged
					--files that have been ignored


					But by : "git stash -u"     #stash untracked files also
	   				: "git stash -a" 	  #stash all files includind tracked, untracked and ignored


You can store multiple stashes and can see them by : "git stash list"
You should save stash with a message(like commit message) so that you can understand the stash context by : git stash save "your msg"

Stashes are stored in a stack(Last In First Out)


					**By default, git stash pop will re-apply the most recently created stash: stash@{0}

					--You can choose which stash to re-apply by passing its identifier as the last argument, for example:
					"git stash pop stash@{2}"

To delete a specific stash : "git stash drop stash@{1}"  		#stash@{1} is the stash identifier example
To delete whole stash list : "git stash clear"


								**Create new branch from stash**
								If the changes on your branch diverge from the changes in your stash, you may run into conflicts when popping or applying your stash. Instead, you can use git stash branch to create a new branch to apply your stashed changes to:

								"git stash branch <newBranchName> stash@{1}"
								--This checks out a new branch based on the commit that you created your stash from, and then pops your stashed changes onto it