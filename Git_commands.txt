

git log                   	   		# it gives list of all recent commits with commit ID, date, author and commit message
git log --stat                 		# it gives same log result with statistics like file names where change happened
git diff <commitID1> <commitID2>   	# it gives difference between two commits with all file names where change happened (1st commit 									should be older than the 2nd commit)

git show <commitID> 				# it gives difference between specified commit and its parent commit(commit before this commit)

git init							# it creates the .git directory (repository) inside your working project directory (existing 										files are not be added automatically in repository)

git status							# it gives the status of your repository (untracked files: files present in working directory 										but not added to staging area; Changes to be commited: files added in staging area but not yet 										commited; Lists all new or modified files to be commited)

git add <filename>					# add file to staging area (While commiting, every file in staging area will be commited to 										repository)

git add -u 							# (add updated) Tracked modified/deleted files to staging area before commit
git add . 							# (add new) Untracked files to staging area
git add -A 							# (add all) the files(tracked and untracked) in working directory to staging area
									it is a combination of: git add -u AND git add .

git reset <filename>				# remove file from staging area before commiting
		OR
git rm --cached <filename>

git commit -m "commit message"		# commit the added files in staging area to repository (-m for message with "commit message")
git commit 							# if you have set core editor then that editor(sublime text) will open to write commit message
git commit -a 						# (commit all) this is combination of: git add -u AND git commit    

git diff 							# shows differences between files in working directory and staging area
git diff --staged 					# shows differences between files in staging area and last commit

git reset --hard 					# discards any changes in files in working directory, staging area and repository(commit) (Use 										with Caution as this is irreversible)

git reset --soft HEAD^ 				# undo last commit from repository (if head is at last commit) but files will still be there in  									 working directory and staging area
git reset --mixed 

git branch 							# shows the list of branches and highlight the current checked out(used) branch with a *(star)
git branch <branchName> 			# create a new branch with specified branchName (it will copy all commits till now) to new branch
git checkout <branchName> 			# checkout (use) specified branchName
git checkout -b <branchName> 		# creates and checkout specified new branchName. it's combination of: git branch <branchName>										AND git checkout <branchName>

git branch -d <branchName> 			# delete specified branch

git log --graph --oneline branch1 branch2  		#creates a commit graph of branch1 and branch2

git merge <branch1> <branch2> 		# merging both branches. If branch1 is checked out while merging then branch1 will have new 				OR						merge commit otherwise branch2.
git merge <branch2> 				# branch2 will merge in to current checked out branch from where merging started

git remote 							# show current remote(remote server) if exists (Eg: origin)
git remote -v 						# show remote with more data like repository URL (-v for verbose)
git remote add origin <repository URL on Github> 		# add remote (named "origin") with Url of created empty repository on Github

git push -u <remote> <branch> 		# push commits to remote-branch (Eg: git push -u origin master) (-u means add upstream 												(tracking) reference, used by argument-less git-pull)
			OR
git push <remote> <branch> 			# will push on specified branch

git push 							# will push all branches

git fetch 							# it downloads new commits from server into local copy of origin/branch but will not merge to 										local branch
git pull 							# It is combination of: git fetch AND git merge origin/current-branch
	OR
git pull origin 					

git pull --no-commit origin 		# it will only fetch files but not automatically commit
git pull --rebase 					# it will rebase instead of merging after fetching files

git clone <repository URL on Github>	 # it will create a local repository(clone) of the remote repository
											(CAUTION: move to a new specific directory where you want the new ropository before cloning otherwise if you are already in a different repository's working directory then cloning will download new repository folder in the same current working directory)



